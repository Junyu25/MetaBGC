# load neccessary packages
require(tidyverse)
require(ggsci)
require(ggpubr)
#load TcmN HMM data and recode sampleType for the complexity of the synthetic sample (#of genomes in samples)
cyclase_TcmN <- read_delim("combined-cyclase_TcmN-spHMM-synthetic_genomes-results.txt",col_names = F, delim = "\t") %>% filter( X7 %in% c("150_180", "160_190","170_200", "180_210","190_220", "200_230", "210_240", "220_250", "230_260",
"240_270", "250_280", "250_280", "260_290", "270_300", "280_310", "290_320", "300_330", "310_340"))
names(cyclase_TcmN) <- c("readID", "sampleType", "sampleID", "cyclaseType", "HMMScore", "window","interval")
cyclase_TcmN$sampleType[str_detect(cyclase_TcmN$sampleID, "high") ==TRUE] <-"high"
cyclase_TcmN$sampleType[str_detect(cyclase_TcmN$sampleID, "low") ==TRUE] <-"low"
cyclase_TcmN$interval <- factor(cyclase_TcmN$interval,levels = c("150_180", "160_190",
"170_200", "180_210","190_220", "200_230", "210_240", "220_250", "230_260",
"240_270", "250_280", "260_290", "270_300", "280_310", "290_320", "300_330", "310_340"))
# Function to aggregate identitical sample reads located at different reading frames
# and take the frame with the highest HMM score
formatHMM<-function(hmmdf){
hmmdfRecoded <- separate(hmmdf, readID, into = c("readIDOnly","F_R_read_frame"), sep = "/", extra = "merge")
hmmdfRecoded_FR <- separate(hmmdfRecoded, F_R_read_frame, into = c("F_R","frameNumb"), sep = "_", extra = "merge")
hmmdfRecodedDF<- within(hmmdfRecoded_FR, readID <- paste(readIDOnly,F_R, sep='/'))
hmmdfRecodedDFUnique<-aggregate(HMMScore ~ readID + sampleID + sampleType + cyclaseType + window + interval, hmmdfRecodedDF, max)
colnames(hmmdfRecodedDFUnique)<-c("readID","Sample", "sampleType", "cyclaseType", "window", "interval","HMMScore")
return(hmmdfRecodedDFUnique)
}
#Keep duplicated reads if they are in different reads
cyclaseTcmN_recoded<-formatHMM(cyclase_TcmN)
#BLAST True positive reads mapped to the T2PKS cyclases genes
cyclase_metadata <- read_tsv("../T2PKS-pos_genomes-cyclase_gene-metadata.txt", col_names = T) %>% filter(used_in_synthetic_metagenome == "Y") %>% select(c(11:9))
# BLAST unfiltered reads at 95% pident no readCoverage filter
all_t2pksBlastDF <- read_delim("../../T2PKS-TP-reads/t2pksBlastDF_all-results.txt", col_names = T, delim = "\t") %>% inner_join(.,cyclase_metadata, by= c("qseqid" = "nucl_cyclase_target_name") )
#load cyclases interval positions data
tcmn_positions <- read_tsv("../../T2PKS-TP-reads/cyclases_genes-interval_position-data.txt",col_names = T) %>% filter(cyclase_type == "TcmN")
filter_blast <- function(df, pos_df){
results <- data.frame()
for (i in 1:nrow(pos_df)){
gene_data <- pos_df[i,]
#filters datatframe for edges and internal reads compared to model interval
interval_df_1 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart %in% gene_data$start:gene_data$end | qend %in% gene_data$start:gene_data$end)
# need to get reads that are bigger than the interval
interval_df_2 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart < gene_data$start & qend > gene_data$end)
interval_df <- rbind(interval_df_1,interval_df_2)
if (nrow(interval_df) > 0){
for (j in 1:nrow(interval_df)){
in_interval_count <- sum(interval_df[j,]$qstart:interval_df[j,]$qend %in% gene_data$start:gene_data$end)
interval_count <- length(gene_data$start:gene_data$end)
interval_cov <- (in_interval_count/interval_count) * 100
if (interval_cov >=90){
res_df<-interval_df[j,]
res_df$model_cov <- interval_cov
res_df$interval <- gene_data$interval
results <- rbind(results,res_df)
}
}
}
}
return(results)
}
#Filter BLAST reads that are within the TcmN genes intervals and cover 90% of the model interval
tcmN_blast_intervals<- filter_blast(all_t2pksBlastDF %>% filter(cyclase_type == "TcmN"), tcmn_positions)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/francinecamacho/Google Drive/T2PKS-paper/computational_analysis/synthetic_genomes/HMM-analysis/TcmN/')
# load neccessary packages
require(tidyverse)
require(ggsci)
require(ggpubr)
#load TcmN HMM data and recode sampleType for the complexity of the synthetic sample (#of genomes in samples)
cyclase_TcmN <- read_delim("combined-cyclase_TcmN-spHMM-synthetic_genomes-results.txt",col_names = F, delim = "\t") %>% filter( X7 %in% c("150_180", "160_190","170_200", "180_210","190_220", "200_230", "210_240", "220_250", "230_260",
"240_270", "250_280", "250_280", "260_290", "270_300", "280_310", "290_320", "300_330", "310_340"))
names(cyclase_TcmN) <- c("readID", "sampleType", "sampleID", "cyclaseType", "HMMScore", "window","interval")
cyclase_TcmN$sampleType[str_detect(cyclase_TcmN$sampleID, "high") ==TRUE] <-"high"
cyclase_TcmN$sampleType[str_detect(cyclase_TcmN$sampleID, "low") ==TRUE] <-"low"
cyclase_TcmN$interval <- factor(cyclase_TcmN$interval,levels = c("150_180", "160_190",
"170_200", "180_210","190_220", "200_230", "210_240", "220_250", "230_260",
"240_270", "250_280", "260_290", "270_300", "280_310", "290_320", "300_330", "310_340"))
# Function to aggregate identitical sample reads located at different reading frames
# and take the frame with the highest HMM score
formatHMM<-function(hmmdf){
hmmdfRecoded <- separate(hmmdf, readID, into = c("readIDOnly","F_R_read_frame"), sep = "/", extra = "merge")
hmmdfRecoded_FR <- separate(hmmdfRecoded, F_R_read_frame, into = c("F_R","frameNumb"), sep = "_", extra = "merge")
hmmdfRecodedDF<- within(hmmdfRecoded_FR, readID <- paste(readIDOnly,F_R, sep='/'))
hmmdfRecodedDFUnique<-aggregate(HMMScore ~ readID + sampleID + sampleType + cyclaseType + window + interval, hmmdfRecodedDF, max)
colnames(hmmdfRecodedDFUnique)<-c("readID","Sample", "sampleType", "cyclaseType", "window", "interval","HMMScore")
return(hmmdfRecodedDFUnique)
}
#Keep duplicated reads if they are in different reads
cyclaseTcmN_recoded<-formatHMM(cyclase_TcmN)
#BLAST True positive reads mapped to the T2PKS cyclases genes
cyclase_metadata <- read_tsv("../T2PKS-pos_genomes-cyclase_gene-metadata.txt", col_names = T) %>% filter(used_in_synthetic_metagenome == "Y") %>% select(c(11:9))
# BLAST unfiltered reads at 95% pident no readCoverage filter
all_t2pksBlastDF <- read_delim("../../T2PKS-TP-reads/t2pksBlastDF_all-results.txt", col_names = T, delim = "\t") %>% inner_join(.,cyclase_metadata, by= c("qseqid" = "nucl_cyclase_target_name") )
#load cyclases interval positions data
tcmn_positions <- read_tsv("../../T2PKS-TP-reads/cyclases_genes-interval_position-data.txt",col_names = T) %>% filter(cyclase_type == "TcmN")
filter_blast <- function(df, pos_df){
results <- data.frame()
for (i in 1:nrow(pos_df)){
gene_data <- pos_df[i,]
#filters datatframe for edges and internal reads compared to model interval
interval_df_1 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart %in% gene_data$start:gene_data$end | qend %in% gene_data$start:gene_data$end)
# need to get reads that are bigger than the interval
interval_df_2 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart < gene_data$start & qend > gene_data$end)
interval_df <- rbind(interval_df_1,interval_df_2)
if (nrow(interval_df) > 0){
for (j in 1:nrow(interval_df)){
in_interval_count <- sum(interval_df[j,]$qstart:interval_df[j,]$qend %in% gene_data$start:gene_data$end)
interval_count <- length(gene_data$start:gene_data$end)
interval_cov <- (in_interval_count/interval_count) * 100
if (interval_cov >=90){
res_df<-interval_df[j,]
res_df$model_cov <- interval_cov
res_df$interval <- gene_data$interval
results <- rbind(results,res_df)
}
}
}
}
return(results)
}
#Filter BLAST reads that are within the TcmN genes intervals and cover 90% of the model interval
tcmN_blast_intervals<- filter_blast(all_t2pksBlastDF %>% filter(cyclase_type == "TcmN"), tcmn_positions)
compare_reads <- function(hmm_df, blast_df){
names(blast_df)[names(blast_df)=="sseqid"] <-"readID"
names(blast_df)[names(blast_df)=="qseqid"] <-"bgcName"
names(hmm_df)[names(hmm_df)=="cyclaseType"] <-"cyclase_type"
# remove columns to compare the two dataframe
blastDF <- blast_df %>% select(-c(model_cov, interval))
common_reads <- hmm_df %>% semi_join(.,blastDF)
common_reads$readCheck<-"common-read"
hmm_unique_reads <- hmm_df %>% anti_join(.,blastDF)
hmm_unique_reads$readCheck<-"hmm-unique-read"
compared_data <- rbind(common_reads, hmm_unique_reads)
return(compared_data)
}
cyclaseTcmN_bin <- compare_reads(cyclaseTcmN_recoded, tcmN_blast_intervals)
names(cyclaseTcmN_bin)[names(cyclaseTcmN_bin)=="cyclase_type"] <-"cyclaseType"
#Function to find the hmm_unique reads that are also mapped using BLAST but didn't make 90% interval
compare_hmm_unique <- function(hmm_df, blast_df, pos_df){
#hmm_unique_df <- hmm_df  %>% inner_join(.,blast_df, by = c("readID"="sseqid", "Sample", "sampleType","cyclaseType"= "cyclase_type"))
hmm_unique_df <- hmm_df  %>% inner_join(.,blast_df, by = c("readID"="sseqid", "Sample", "sampleType", "cyclase_type"))
intervals <- unique(hmm_unique_df$interval)
results <- data.frame()
#check that reads are in the same interval to throw out
for (i in 1:length(intervals)){
gene_interval_data <- pos_df %>% filter(interval == intervals[i])
for (k in 1:nrow(gene_interval_data)){
gene_data <- gene_interval_data[k,]
#filters datatframe for edges and internal reads compared to model interval
interval_df  <- hmm_unique_df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart %in% gene_data$start:gene_data$end | qend %in% gene_data$start:gene_data$end)
if (nrow(interval_df) > 0 ){
results <- rbind(results,interval_df)
}
}
}
return(results%>% distinct())
}
#Filter TcmN data with cutoffs to compare to BLAST interval reads
TcmN_filtered_median <- cyclaseTcmN_recoded %>% filter((interval == "150_180" & HMMScore >=30 )|
(interval == "160_190" & HMMScore >=30 )|
(interval == "170_200" & HMMScore >=30 )|
(interval == "180_210" & HMMScore >=25 )|
(interval == "190_220" & HMMScore >=20 )|
(interval == "200_230" & HMMScore >=20 )|
(interval == "210_240" & HMMScore >=30 )|
(interval == "220_250" & HMMScore >=30 )|
(interval == "230_260" & HMMScore >=30 )|
(interval == "240_270" & HMMScore >=30 )|
(interval == "250_280" & HMMScore >=30 )|
(interval == "260_290" & HMMScore >=30 )|
(interval == "270_300" & HMMScore >=25 )|
(interval == "280_310" & HMMScore >=25 )|
(interval == "290_320" & HMMScore >=25 )|
(interval == "300_330" & HMMScore >=25 )|
(interval == "310_340" & HMMScore >=25 ))
TcmN_filtered_median_subfive <- cyclaseTcmN_recoded %>% filter((interval == "150_180" & HMMScore >=25 )|
(interval == "160_190" & HMMScore >=25 )|
(interval == "170_200" & HMMScore >=25 )|
(interval == "180_210" & HMMScore >=20 )|
(interval == "190_220" & HMMScore >=15 )|
(interval == "200_230" & HMMScore >=15 )|
(interval == "210_240" & HMMScore >=25 )|
(interval == "220_250" & HMMScore >=25 )|
(interval == "230_260" & HMMScore >=25 )|
(interval == "240_270" & HMMScore >=25 )|
(interval == "250_280" & HMMScore >=25 )|
(interval == "260_290" & HMMScore >=25 )|
(interval == "270_300" & HMMScore >=20 )|
(interval == "280_310" & HMMScore >=20 )|
(interval == "290_320" & HMMScore >=20 )|
(interval == "300_330" & HMMScore >=20 )|
(interval == "310_340" & HMMScore >=20 ))
TcmN_filtered_median_plusfive <- cyclaseTcmN_recoded %>% filter((interval == "150_180" & HMMScore >=35 )|
(interval == "160_190" & HMMScore >=35 )|
(interval == "170_200" & HMMScore >=35 )|
(interval == "180_210" & HMMScore >=30 )|
(interval == "190_220" & HMMScore >=25 )|
(interval == "200_230" & HMMScore >=25 )|
(interval == "210_240" & HMMScore >=35 )|
(interval == "220_250" & HMMScore >=35 )|
(interval == "230_260" & HMMScore >=35 )|
(interval == "240_270" & HMMScore >=35 )|
(interval == "250_280" & HMMScore >=35 )|
(interval == "260_290" & HMMScore >=35 )|
(interval == "270_300" & HMMScore >=30 )|
(interval == "280_310" & HMMScore >=30 )|
(interval == "290_320" & HMMScore >=30 )|
(interval == "300_330" & HMMScore >=30 )|
(interval == "310_340" & HMMScore >=30 ))
#return the hmm-unique reads
return_hmm_unique <- function(hmm_df, blast_df){
oxyn_hmm_df <- hmm_df  %>% select(-c(window))
oxyn_hmm_df$interval <- as.character(oxyn_hmm_df$interval)
names(oxyn_hmm_df)[names(oxyn_hmm_df)=="cyclaseType"] <-"cyclase_type"
names(blast_df)[names(blast_df)=="sseqid"] <-"readID"
OxyN_hmm_unique <- oxyn_hmm_df %>% anti_join(.,blast_df, by= c("readID", "Sample", "sampleType", "interval"))
return(OxyN_hmm_unique)
}
median_tcmN_hmmunique <-return_hmm_unique(TcmN_filtered_median, tcmN_blast_intervals)
median_TcmN_hmmunique_less_model_cov<-compare_hmm_unique(median_tcmN_hmmunique,all_t2pksBlastDF,tcmn_positions )
median_remaining_hmm_tcmn<- median_tcmN_hmmunique %>% anti_join(.,median_TcmN_hmmunique_less_model_cov)
table(median_remaining_hmm_tcmn$interval)
pks_genomes_median_check <- c("gi|529222834|ref|NC_021985.1|", "gi|640937269|gb|JJOH01000002.1|", "JOFH01000011.1", "gi|1081600317|emb|FMWJ01000012.1|", "AZXI01000002.1")
#median_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
remaining_hmm_tcmn_pos_median_check <- median_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_median_check)
############################################################################################################################
subfive_tcmN_hmmunique <-return_hmm_unique(TcmN_filtered_median_subfive, tcmN_blast_intervals)
subfive_TcmN_hmmunique_less_model_cov<-compare_hmm_unique(subfive_tcmN_hmmunique,all_t2pksBlastDF,tcmn_positions )
subfive_remaining_hmm_tcmn<- subfive_tcmN_hmmunique %>% anti_join(.,subfive_TcmN_hmmunique_less_model_cov)
table(subfive_remaining_hmm_tcmn$interval)
#subfive_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
pks_genomes_subfive_check <- c("gi|529222834|ref|NC_021985.1|", "JOFH01000019.1", "gi|640937269|gb|JJOH01000002.1|", "JOFH01000011.1", "gi|1081600317|emb|FMWJ01000012.1|", "AZXI01000002.1", "gi|1081601449|emb|FMWJ01000005.1|")
remaining_hmm_tcmn_pos_subfive_check <- subfive_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_subfive_check)
############################################################################################################################
plusfive_tcmN_hmmunique <-return_hmm_unique(TcmN_filtered_median_plusfive, tcmN_blast_intervals)
plusfive_TcmN_hmmunique_less_model_cov<-compare_hmm_unique(plusfive_tcmN_hmmunique,all_t2pksBlastDF,tcmn_positions )
plusfive_remaining_hmm_tcmn<- plusfive_tcmN_hmmunique %>% anti_join(.,plusfive_TcmN_hmmunique_less_model_cov)
table(plusfive_remaining_hmm_tcmn$interval)
#plusfive_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
pks_genomes_plusfive_check <- c("gi|640937269|gb|JJOH01000002.1|", "gi|529222834|ref|NC_021985.1|")
remaining_hmm_tcmn_pos_plusfive_check <- plusfive_remaining_hmm_tcmn %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_plusfive_check)
blast_hmm_unique <- read_tsv("/Users/francinecamacho/Google Drive/T2PKS-paper/computational_analysis/synthetic_genomes/HMM-analysis/TcmN/hmm-unique-analysis/TcmN_hmm-unique_blast-results.txt", col_names = T)
filter_hmm_unique  <- function(df, pos_df){
results <- data.frame()
for (i in 1:nrow(df)){
blast_data <- df[i,]
domain <- blast_data$sseqid
domain_interval <- blast_data$interval
gene_data <- pos_df %>% filter( gene_name == domain  & interval == domain_interval)
#filters datatframe for edges and internal reads compared to model interval
interval_df_1 <- blast_data %>% filter(sseqid ==gene_data$gene_name) %>%
filter(sstart %in% gene_data$start:gene_data$end | send %in% gene_data$start:gene_data$end)
# need to get reads that are bigger than the interval
interval_df_2 <- df %>% filter(sseqid ==gene_data$gene_name) %>%
filter(sstart < gene_data$start & send > gene_data$end)
results <- rbind(results,interval_df_1,interval_df_2)
}
return(results)
}
median_blast_df <- blast_hmm_unique %>% filter(cutoff== "median_score") %>% inner_join(., remaining_hmm_tcmn_pos_median_check, by = c("qseqid" = "readID", "Sample"))
subfive_blast_df <- blast_hmm_unique %>% filter(cutoff== "minus_five_score") %>% inner_join(., remaining_hmm_tcmn_pos_subfive_check, by = c("qseqid" = "readID", "Sample"))
plusfive_blast_df <- blast_hmm_unique %>% filter(cutoff== "plus_five_score") %>% inner_join(., remaining_hmm_tcmn_pos_plusfive_check, by = c("qseqid" = "readID", "Sample"))
filter_hmm_unique(median_blast_df,tcmn_positions) %>% as.data.frame() %>% distinct(qseqid)
filter_hmm_unique(subfive_blast_df,tcmn_positions) %>% as.data.frame() %>% distinct(qseqid)
filter_hmm_unique(plusfive_blast_df,tcmn_positions) %>% as.data.frame()%>% distinct(qseqid)
# Finalized cutoffs with intervals and cutoffs
TcmN_filtered_final <- cyclaseTcmN_recoded %>% filter((interval == "150_180" & HMMScore>=25)|
(interval == "160_190" & HMMScore>=25)|
(interval == "170_200" & HMMScore >=25 ) |
(interval == "180_210" & HMMScore >=20 )|
(interval == "210_240" & HMMScore >=25 )|
(interval == "220_250" & HMMScore >=25 )|
(interval == "230_260" & HMMScore >=25 )|
(interval == "240_270" & HMMScore >=25 )|
(interval == "250_280" & HMMScore >=30 )|
(interval == "260_290" & HMMScore >=25 ))
TcmN_filtered_final_updated <- cyclaseTcmN_recoded %>% filter((interval == "150_180" & HMMScore>=25)|
(interval == "160_190" & HMMScore>=25)|
(interval == "170_200" & HMMScore >=25 ) |
(interval == "180_210" & HMMScore >=30 )|
(interval == "210_240" & HMMScore >=30 )|
(interval == "220_250" & HMMScore >=30 )|
(interval == "230_260" & HMMScore >=25 )|
(interval == "240_270" & HMMScore >=25 )|
(interval == "250_280" & HMMScore >=35 )|
(interval == "260_290" & HMMScore >=25 ))
#TcmN_filtered_final%>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
#write_tsv( TcmN_filtered_final %>% select(-c(window, interval))%>% group_by(readID,Sample) %>% arrange(desc(HMMScore)) %>% top_n(1, HMMScore) %>% filter(row_number() == 1) %>% ungroup(), "TcmN-final_data-raw.txt", col_names = T)
#rename TcmN hmm_unique within the folder to detected_reads
#parseReads(TcmN_filtered_final, "cyclaseTcmN", "/Users/francinecamacho/Google Drive/T2PKS-paper/computational_analysis/synthetic_genomes/read-quantification/TcmN/sample-readIDs-files")
TcmN_filtered_final_distinct <- TcmN_filtered_final %>% arrange(desc(HMMScore)) %>% group_by(readID, Sample) %>% top_n(1) %>%
filter(row_number()==1) %>% ungroup() #4423
TcmN_filtered_final_distinct$interval <-as.character(TcmN_filtered_final_distinct$interval)
names(TcmN_filtered_final_distinct)[names(TcmN_filtered_final_distinct)=="cyclaseType"] <-"cyclase_type"
results_common<-TcmN_filtered_final_distinct %>% inner_join(., tcmN_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type")) %>% select(-c(model_cov))
results_hmm_unique<-TcmN_filtered_final_distinct %>% anti_join(., tcmN_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type"))
results_hmm_unique_TP<-compare_hmm_unique(results_hmm_unique,all_t2pksBlastDF,tcmn_positions )
results_hmm_unique_FP <- results_hmm_unique %>% anti_join(.,results_hmm_unique_TP)
TcmN_filtered_final_distinct_TPs <- rbind(results_common, results_hmm_unique_TP) %>% select(-c(8:10,12:17))
combined_TcmN_results <- TcmN_filtered_final_distinct_TPs %>% full_join(., results_hmm_unique_FP )
combined_TcmN_results %>% filter(!is.na(qseqid)) %>% distinct(readID, Sample) %>% count()
TcmN_filtered_final_distinct <- TcmN_filtered_final_updated %>% arrange(desc(HMMScore)) %>% group_by(readID, Sample) %>% top_n(1) %>% filter(row_number()==1) %>% ungroup() #4423
TcmN_filtered_final_distinct$interval <-as.character(TcmN_filtered_final_distinct$interval)
names(TcmN_filtered_final_distinct)[names(TcmN_filtered_final_distinct)=="cyclaseType"] <-"cyclase_type"
results_common<-TcmN_filtered_final_distinct %>% inner_join(., tcmN_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type")) %>% select(-c(model_cov))
results_hmm_unique<-TcmN_filtered_final_distinct %>% anti_join(., tcmN_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type"))
results_hmm_unique_TP<-compare_hmm_unique(results_hmm_unique,all_t2pksBlastDF,tcmn_positions )
results_hmm_unique_FP <- results_hmm_unique %>% anti_join(.,results_hmm_unique_TP)
TcmN_filtered_final_distinct_TPs <- rbind(results_common, results_hmm_unique_TP) %>% select(-c(8:10,12:17))
combined_TcmN_results <- TcmN_filtered_final_distinct_TPs %>% full_join(., results_hmm_unique_FP )
combined_TcmN_results %>% filter(!is.na(qseqid)) %>% distinct(readID, Sample) %>% count()
3372/3741
combined_TcmN_results %>% filter(is.na(qseqid))
combined_TcmN_results %>% filter(is.na(qseqid)) %>% distinct(readID)
combined_TcmN_results %>% filter(is.na(qseqid)) %>% distinct(readID) %>% as.data.frame()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/francinecamacho/Google Drive/T2PKS-paper/computational_analysis/synthetic_genomes/HMM-analysis/TcmJ/')
# load neccessary packages
require(tidyverse)
require(ggsci)
require(ggpubr)
#load TcmJ HMM data and recode sampleType for the complexity of the synthetic sample (#of genomes in samples)
cyclase_TcmJ <- read_delim("combined-cyclase_TcmJ-spHMM-synthetic_genomes-results.txt",col_names = F, delim = "\t")
names(cyclase_TcmJ) <- c("readID", "sampleType", "sampleID", "cyclaseType", "HMMScore", "window","interval")
cyclase_TcmJ$sampleType[str_detect(cyclase_TcmJ$sampleID, "high") ==TRUE] <-"high"
cyclase_TcmJ$sampleType[str_detect(cyclase_TcmJ$sampleID, "low") ==TRUE] <-"low"
cyclase_TcmJ$interval <- factor(cyclase_TcmJ$interval,levels = c(
"0_30","10_40","20_50","30_60","40_70","50_80","60_90","70_100","80_110",
"90_120"))
# Function to aggregate identitical sample reads located at different reading frames
# and take the frame with the highest HMM score
formatHMM<-function(hmmdf){
hmmdfRecoded <- separate(hmmdf, readID, into = c("readIDOnly","F_R_read_frame"), sep = "/", extra = "merge")
hmmdfRecoded_FR <- separate(hmmdfRecoded, F_R_read_frame, into = c("F_R","frameNumb"), sep = "_", extra = "merge")
hmmdfRecodedDF<- within(hmmdfRecoded_FR, readID <- paste(readIDOnly,F_R, sep='/'))
hmmdfRecodedDFUnique<-aggregate(HMMScore ~ readID + sampleID + sampleType + cyclaseType + window + interval, hmmdfRecodedDF, max)
colnames(hmmdfRecodedDFUnique)<-c("readID","Sample", "sampleType", "cyclaseType", "window", "interval","HMMScore")
return(hmmdfRecodedDFUnique)
}
#Keep duplicated reads if they are in different reads
cyclaseTcmJ_recoded<-formatHMM(cyclase_TcmJ)
#BLAST True positive reads mapped to the T2PKS cyclases genes
cyclase_metadata <- read_tsv("../T2PKS-pos_genomes-cyclase_gene-metadata.txt", col_names = T) %>% filter(used_in_synthetic_metagenome == "Y") %>% select(c(11:9))
# BLAST unfiltered reads at 95% pident no readCoverage filter
all_t2pksBlastDF <- read_delim("../../T2PKS-TP-reads/t2pksBlastDF_all-results.txt", col_names = T, delim = "\t") %>% inner_join(.,cyclase_metadata, by= c("qseqid" = "nucl_cyclase_target_name") )
#load cyclases interval positions data
tcmj_positions <- read_tsv("../../T2PKS-TP-reads/cyclases_genes-interval_position-data.txt",col_names = T) %>% filter(cyclase_type == "TcmJ")
filter_blast <- function(df, pos_df){
results <- data.frame()
for (i in 1:nrow(pos_df)){
gene_data <- pos_df[i,]
#filters datatframe for edges and internal reads compared to model interval
interval_df_1 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart %in% gene_data$start:gene_data$end | qend %in% gene_data$start:gene_data$end)
# need to get reads that are bigger than the interval
interval_df_2 <- df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart < gene_data$start & qend > gene_data$end)
interval_df <- rbind(interval_df_1,interval_df_2)
if (nrow(interval_df) > 0){
for (j in 1:nrow(interval_df)){
in_interval_count <- sum(interval_df[j,]$qstart:interval_df[j,]$qend %in% gene_data$start:gene_data$end)
interval_count <- length(gene_data$start:gene_data$end)
interval_cov <- (in_interval_count/interval_count) * 100
if (interval_cov >=90){
res_df<-interval_df[j,]
res_df$model_cov <- interval_cov
res_df$interval <- gene_data$interval
results <- rbind(results,res_df)
}
}
}
}
return(results)
}
#Filter BLAST reads that are within the TcmJ genes intervals and cover 90% of the model interval
tcmJ_blast_intervals<- filter_blast(all_t2pksBlastDF %>% filter(cyclase_type == "TcmJ"), tcmj_positions)
compare_reads <- function(hmm_df, blast_df){
names(blast_df)[names(blast_df)=="sseqid"] <-"readID"
names(blast_df)[names(blast_df)=="qseqid"] <-"bgcName"
names(hmm_df)[names(hmm_df)=="cyclaseType"] <-"cyclase_type"
# remove columns to compare the two dataframe
blastDF <- blast_df %>% select(-c(model_cov, interval))
common_reads <- hmm_df %>% semi_join(.,blastDF)
common_reads$readCheck<-"common-read"
hmm_unique_reads <- hmm_df %>% anti_join(.,blastDF)
hmm_unique_reads$readCheck<-"hmm-unique-read"
compared_data <- rbind(common_reads, hmm_unique_reads)
return(compared_data)
}
cyclaseTcmJ_bin <- compare_reads(cyclaseTcmJ_recoded, tcmJ_blast_intervals)
names(cyclaseTcmJ_bin)[names(cyclaseTcmJ_bin)=="cyclase_type"] <-"cyclaseType"
#Function to find the hmm_unique reads that are also mapped using BLAST but didn't make 90% interval
compare_hmm_unique <- function(hmm_df, blast_df, pos_df){
#hmm_unique_df <- hmm_df  %>% inner_join(.,blast_df, by = c("readID"="sseqid", "Sample", "sampleType","cyclaseType"= "cyclase_type"))
hmm_unique_df <- hmm_df  %>% inner_join(.,blast_df, by = c("readID"="sseqid", "Sample", "sampleType", "cyclase_type"))
intervals <- unique(hmm_unique_df$interval)
results <- data.frame()
#check that reads are in the same interval to throw out
for (i in 1:length(intervals)){
gene_interval_data <- pos_df %>% filter(interval == intervals[i])
for (k in 1:nrow(gene_interval_data)){
gene_data <- gene_interval_data[k,]
#filters datatframe for edges and internal reads compared to model interval
interval_df  <- hmm_unique_df %>% filter(qseqid ==gene_data$gene_name) %>%
filter(qstart %in% gene_data$start:gene_data$end | qend %in% gene_data$start:gene_data$end)
if (nrow(interval_df) > 0 ){
results <- rbind(results,interval_df)
}
}
}
return(results%>% distinct())
}
#Filter TcmJ data with cutoffs to compare to BLAST interval reads
TcmJ_filtered_median <- cyclaseTcmJ_recoded %>% filter((interval == "0_30" & HMMScore>=25)|
(interval == "10_40" & HMMScore >=30)|
(interval == "20_50" & HMMScore >=25)|
(interval == "30_60" & HMMScore >=30)|
(interval == "40_70" & HMMScore >=30 )|
(interval == "50_80" & HMMScore>=25)|
(interval == "60_90" & HMMScore >=25 ) |
(interval == "70_100" & HMMScore >=25 )|
(interval == "80_110" & HMMScore >=25 )|
(interval == "90_120" & HMMScore >=30 ))
TcmJ_filtered_median_subfive<- cyclaseTcmJ_recoded %>% filter((interval == "0_30" & HMMScore>=20)|
(interval == "10_40" & HMMScore >=25)|
(interval == "20_50" & HMMScore >=20)|
(interval == "30_60" & HMMScore >=25)|
(interval == "40_70" & HMMScore >=25 )|
(interval == "50_80" & HMMScore>=20)|
(interval == "60_90" & HMMScore >=20 ) |
(interval == "70_100" & HMMScore >=20 )|
(interval == "80_110" & HMMScore >=20 )|
(interval == "90_120" & HMMScore >=25 ))
TcmJ_filtered_median_plusfive <- cyclaseTcmJ_recoded %>% filter((interval == "0_30" & HMMScore>=30)|
(interval == "10_40" & HMMScore >=35)|
(interval == "20_50" & HMMScore >=30)|
(interval == "30_60" & HMMScore >=35)|
(interval == "40_70" & HMMScore >=35 )|
(interval == "50_80" & HMMScore>=30)|
(interval == "60_90" & HMMScore >=30 ) |
(interval == "70_100" & HMMScore >=30 )|
(interval == "80_110" & HMMScore >=30 )|
(interval == "90_120" & HMMScore >=35 ))
#return the hmm-unique reads
return_hmm_unique <- function(hmm_df, blast_df){
tcmj_hmm_df <- hmm_df  %>% select(-c(window))
tcmj_hmm_df$interval <- as.character(tcmj_hmm_df$interval)
names(tcmj_hmm_df)[names(tcmj_hmm_df)=="cyclaseType"] <-"cyclase_type"
names(blast_df)[names(blast_df)=="sseqid"] <-"readID"
TcmJ_hmm_unique <- tcmj_hmm_df %>% anti_join(.,blast_df, by= c("readID", "Sample", "sampleType", "interval"))
return(TcmJ_hmm_unique)
}
median_tcmJ_hmmunique <-return_hmm_unique(TcmJ_filtered_median, tcmJ_blast_intervals)
median_tcmJ_hmmunique_less_model_cov<-compare_hmm_unique(median_tcmJ_hmmunique,all_t2pksBlastDF,tcmj_positions )
median_remaining_hmm_tcmj<- median_tcmJ_hmmunique %>% anti_join(.,median_tcmJ_hmmunique_less_model_cov)
table(median_remaining_hmm_tcmj$interval)
pks_genomes_median_check <- c("AZXI01000013.1", "LZZI01000042.1", "LZZI01000061.1","JOFH01000003.1", "LZZI01000001.1")
#median_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
remaining_hmm_tcmj_pos_median_check <- median_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_median_check)
############################################################################################################################
subfive_tcmJ_hmmunique <-return_hmm_unique(TcmJ_filtered_median_subfive, tcmJ_blast_intervals)
subfive_tcmJ_hmmunique_less_model_cov<-compare_hmm_unique(subfive_tcmJ_hmmunique,all_t2pksBlastDF,tcmj_positions )
subfive_remaining_hmm_tcmj<- subfive_tcmJ_hmmunique %>% anti_join(.,subfive_tcmJ_hmmunique_less_model_cov)
table(subfive_remaining_hmm_tcmj$interval)
#subfive_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
pks_genomes_subfive_check <- c("AZXI01000071.1", "gi|640932354|gb|JJOH01000026.1|", "AZXI01000013.1", "JOFH01000019.1", "LZZI01000099.1", "gi|1098134558|emb|FOXX01000014.1|", "gi|529222834|ref|NC_021985.1|", "LZZI01000042.1", "AZXI01000006.1", "gi|640930117|gb|JJOH01000105.1|", "gi|754859657|ref|NZ_CP009285.1|", "LZZI01000061.1", "gi|1081599064|emb|FMWJ01000030.1|", "LZZI01000045.1", "AZXI01000017.1", "JOFH01000003.1", "AZXI01000071.1", "gi|640934298|gb|JJOH01000015.1|", "JOFH01000047.1", "LZZI01000001.1", "JOFH01000001.1", "LZZI01000051.1", "gi|928417113|gb|LGKI01000312.1|", "AZXI01000003.1", "OBDZ01000041.1")
remaining_hmm_tcmj_pos_subfive_check <- subfive_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_subfive_check)
###############################################################################################################################################
plusfive_tcmJ_hmmunique <-return_hmm_unique(TcmJ_filtered_median_plusfive, tcmJ_blast_intervals)
plusfive_tcmJ_hmmunique_less_model_cov<-compare_hmm_unique(plusfive_tcmJ_hmmunique,all_t2pksBlastDF,tcmj_positions )
plusfive_remaining_hmm_tcmj<- plusfive_tcmJ_hmmunique %>% anti_join(.,plusfive_tcmJ_hmmunique_less_model_cov)
table(plusfive_remaining_hmm_tcmj$interval)
#plusfive_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% distinct(scaffold_id)
pks_genomes_plusfive_check <- c("AZXI01000013.1", "JOFH01000003.1")
remaining_hmm_tcmj_pos_plusfive_check <- plusfive_remaining_hmm_tcmj %>% separate(readID, c("scaffold_id", "rest_id"), sep = "-", remove = F) %>% filter(scaffold_id %in% pks_genomes_plusfive_check)
TcmJ_filtered_final <- cyclaseTcmJ_recoded %>% filter((interval == "0_30" & HMMScore>=20)|
(interval == "10_40" & HMMScore>=25)|
(interval == "20_50" & HMMScore >=25 ) |
(interval == "30_60" & HMMScore >=25 )|
(interval == "40_70" & HMMScore >=30 )|
(interval == "90_120" & HMMScore >=25 ))
TcmJ_filtered_final_updated <- cyclaseTcmJ_recoded %>% filter((interval == "0_30" & HMMScore>=30)|
(interval == "10_40" & HMMScore>=30)|
(interval == "20_50" & HMMScore >=25 ) |
(interval == "30_60" & HMMScore >=30 )|
(interval == "40_70" & HMMScore >=30 )|
(interval == "90_120" & HMMScore >=30 ))
TcmJ_filtered_final_distinct <- TcmJ_filtered_final_updated  %>% arrange(desc(HMMScore)) %>% group_by(readID, Sample) %>% top_n(1) %>%
filter(row_number()==1) %>% ungroup() #2048
TcmJ_filtered_final_distinct$interval <-as.character(TcmJ_filtered_final_distinct$interval)
names(TcmJ_filtered_final_distinct)[names(TcmJ_filtered_final_distinct)=="cyclaseType"] <-"cyclase_type"
results_common<-TcmJ_filtered_final_distinct %>% inner_join(., tcmJ_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type")) %>% select(-c(model_cov))
results_hmm_unique<-TcmJ_filtered_final_distinct %>% anti_join(., tcmJ_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type"))
results_hmm_unique_TP<-compare_hmm_unique(results_hmm_unique,all_t2pksBlastDF,tcmj_positions )
results_hmm_unique_FP <- results_hmm_unique %>% anti_join(.,results_hmm_unique_TP)
TcmJ_filtered_final_distinct_TPs <- rbind(results_common, results_hmm_unique_TP) %>% select(-c(8:10,12:17))
combined_TcmJ_results <- TcmJ_filtered_final_distinct_TPs %>% full_join(., results_hmm_unique_FP )
combined_TcmJ_results %>% filter(!is.na(qseqid)) %>% distinct(readID, Sample) %>% count()
TcmJ_filtered_final_distinct <- TcmJ_filtered_final %>% arrange(desc(HMMScore)) %>% group_by(readID, Sample) %>% top_n(1) %>%
filter(row_number()==1) %>% ungroup() #2048
#TcmJ_filtered_final_distinct <- TcmJ_filtered_final_updated  %>% arrange(desc(HMMScore)) %>% group_by(readID, Sample) %>% top_n(1) %>% filter(row_number()==1) %>% ungroup() #2048
TcmJ_filtered_final_distinct$interval <-as.character(TcmJ_filtered_final_distinct$interval)
names(TcmJ_filtered_final_distinct)[names(TcmJ_filtered_final_distinct)=="cyclaseType"] <-"cyclase_type"
results_common<-TcmJ_filtered_final_distinct %>% inner_join(., tcmJ_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type")) %>% select(-c(model_cov))
results_hmm_unique<-TcmJ_filtered_final_distinct %>% anti_join(., tcmJ_blast_intervals, by = c("readID" = "sseqid", "Sample", "sampleType", "interval", "cyclase_type"))
results_hmm_unique_TP<-compare_hmm_unique(results_hmm_unique,all_t2pksBlastDF,tcmj_positions )
results_hmm_unique_FP <- results_hmm_unique %>% anti_join(.,results_hmm_unique_TP)
TcmJ_filtered_final_distinct_TPs <- rbind(results_common, results_hmm_unique_TP) %>% select(-c(8:10,12:17))
combined_TcmJ_results <- TcmJ_filtered_final_distinct_TPs %>% full_join(., results_hmm_unique_FP )
combined_TcmJ_results %>% filter(!is.na(qseqid)) %>% distinct(readID, Sample) %>% count()
1298/1818
